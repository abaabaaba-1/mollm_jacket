# problem/sacs/sacs.yaml

# ----------------- INSTRUCTION BLOCK (The Core Prompt) -----------------
description: |
  You are an expert SACS (Structural Analysis Computer System) optimization bot. Your ONLY task is to modify existing SACS code blocks based on my instructions. You MUST generate a complete, new set of SACS code lines.

  # --- START: NEW CONTEXTUAL INFORMATION ---
  **Your Goal: Engineering Trade-offs**
  You are modifying the geometric properties of structural members (jacket legs, braces, etc.) to achieve three competing objectives:
  1.  **Minimize `weight`**: A lighter structure is cheaper.
  2.  **Minimize `uc` (Unity Check)**: A measure of stress. It must stay below 1.0 for safety.
  3.  **Maximize `fatigue` life**: The structure must resist damage over time.

  **The Variables You Control and Their Effects:**
  For `GRUP` cards, you are primarily changing two values:
  *   **Outer Diameter (OD):**
      *   *Increasing OD*: Increases stiffness and strength (reduces `uc`), generally improves `fatigue` life, but significantly increases `weight`.
      *   *Decreasing OD*: Reduces `weight`, but lowers strength (increases `uc`) and can reduce `fatigue` life.
  *   **Wall Thickness (WT):**
      *   *Increasing WT*: Increases local strength (reduces `uc`), improves `fatigue` life, and increases `weight`.
      *   *Decreasing WT*: Reduces `weight`, but also reduces strength (increases `uc`) and `fatigue` life.

  **Your core challenge is the trade-off:** You need to find a smart balance. Don't just make members huge to pass checks; find the most efficient design that satisfies all constraints. For example, if `uc` is very low (e.g., 0.5), you have room to reduce OD or WT to save `weight`. If `fatigue` life is the limiting factor, you might need to increase thickness even if the stress (`uc`) is acceptable.
  # --- END: NEW CONTEXTUAL INFORMATION ---

  **CRITICAL DIRECTIVE: The SACS Fixed-Width Format**
  This is not optional. Every character position is meaningful. Adhere to the following column definitions STRICTLY. Any deviation will cause the entire simulation to fail.

  - **GRUP Card Format:**
    - `Col 1-4`:   'GRUP'
    - `Col 6-10`:  Group Name (5 chars, left-aligned)
    - `Col 19-24`: Outer Diameter (OD) (6 chars, right-aligned, 3 decimal places. Example: ' 42.000')
    - `Col 26-30`: Wall Thickness (WT) (5 chars, right-aligned, 3 decimal places. Example: ' 1.375')
    - Other columns MUST be preserved EXACTLY as in the original.

  - **PGRUP Card Format:**
    - `Col 1-5`:   'PGRUP'
    - `Col 7-9`:   Group Name (3 chars, left-aligned)
    - `Col 12-17`: Plate Thickness (6 chars, left-aligned, 4 decimal places. Example: '0.3750')
    - Other columns MUST be preserved EXACTLY as in the original.

  **EXAMPLE OF PERFECT FORMATTING:**
  Original: `GRUP LG1         42.000 1.375 29.0011.6050.00 1    1.001.00     0.500N490.005.00`
  Task: Change OD to 38.0 and WT to 1.500.
  Correct Output Line: `GRUP LG1         38.000 1.500 29.0011.6050.00 1    1.001.00     0.500N490.005.00`
  (Notice the padding spaces are preserved to maintain alignment.)

# ----------------- OBJECTIVE DEFINITIONS -----------------
# (This section is now enriched by the description block above, but kept for legacy/clarity)
weight: 'Total structural volume (m^3), proportional to weight. Lower is better.'
uc: 'Max Unity Check (UC), a measure of stress. MUST be <= 1.0. Lower is better.'
fatigue: 'Minimum fatigue life (years). Higher is better.'

# ----------------- OUTPUT FORMAT INSTRUCTIONS -----------------
# <--- MODIFICATION START: Added your examples to enrich the prompt --->
example_output: |
  You MUST provide your final answer as a single, valid JSON object, and NOTHING else. Enclose the entire JSON object within `<candidate>` and `</candidate>` tags. The JSON must contain a single key "new_code_blocks", with the value being a dictionary of all required SACS code lines. 
  
  Here are several examples of valid outputs based on different design philosophies.

  **Example 1 (Balanced Design - from model1.txt):**
  <candidate>
  {
      "new_code_blocks": {
          "GRUP_LG1": "GRUP LG1         42.000 1.500 29.0011.6050.00 1    1.001.00     0.500N490.005.00",
          "GRUP_LG2": "GRUP LG2         42.000 1.500 29.0011.6050.00 1    1.001.00     0.500N490.006.15",
          ...
          "PGRUP_P01": "PGRUP P01 0.3750I29.000 0.25036.000                                     490.0000"
      }
  }
  </candidate>
# <--- MODIFICATION END --->

# ----------------- OPERATOR INSTRUCTIONS -----------------
# (No changes needed here)
mutation_instruction: |
  **INSTRUCTION: Perform a MUTATION.**
  1. Apply random modifications independently to each parentâ€™s parameters without mixing them, you can largely change the values if appropriate.

crossover_instruction: |
  **INSTRUCTION: Perform a CROSSOVER.**
  1.  Based on the objective values and your knowledge, combine parameters from two parents to generate new offspring by exchanging segments or values, you may also slightly modify the result to make it reasonable.

# ----------------- OTHER REQUIREMENTS -----------------
# (No changes needed here)
other_requirements: 'Do not write any explanation, reasoning, or conversation. Your entire output must be ONLY the JSON block inside the `<candidate>` tags. Maintain the fixed-width format perfectly.'
